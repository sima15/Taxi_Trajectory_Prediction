asPOLYLINE
test
head(test)
test <- read.csv("test.csv")
names(test)
asPOLYLINE <- as.character(test$POLYLINE)
head(asPOLYLINE)
positions <- function(row) as.data.frame(do.call(rbind, fromJSON(asPOLYLINE)))
coordinates <- data.frame(TripId=c(), Ordinal=c(), Lat=c(), Lon=c(), Status=c(), EndPoint=c())
for (i in 1:nrow(test)) {
  pos <- positions(test[i,])
  if (nrow(pos)==1) {
    status <- c("Start")
  } else {
    status <- c("Start", rep("During Trip", nrow(pos)-2), "Last Observation")
  }
  coordinates <- rbind(coordinates, data.frame(TripId=test$TRIP_ID[i],
                                               Ordinal=1:nrow(pos),
                                               Lat = pos$V2,
                                               Lon = pos$V1,
                                               Status = status,
                                               Endpoint = status != "During Trip"))
}
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
library(rjson)
for (i in 1:nrow(test)) {
  pos <- positions(test[i,])
  if (nrow(pos)==1) {
    status <- c("Start")
  } else {
    status <- c("Start", rep("During Trip", nrow(pos)-2), "Last Observation")
  }
  coordinates <- rbind(coordinates, data.frame(TripId=test$TRIP_ID[i],
                                               Ordinal=1:nrow(pos),
                                               Lat = pos$V2,
                                               Lon = pos$V1,
                                               Status = status,
                                               Endpoint = status != "During Trip"))
}
head(coordinates)
coordinates$Status <- factor(coordinates$Status, levels <- c("Start", "During Trip", "Last Observation"))
geom_point
utils:::menuInstallPkgs()
geom_point
p <- geom_point(data=coordinates, aes(x=Lon, y=Lat, color=Status, size=Endpoint)) +
     ggtitle("Taxi Trips in the Test Set") +
     scale_color_manual(values=c("#377EB8", "#4DAF4A", "#E41A1C")) +
     scale_size_manual(values=c(1.5, 3))
ggsave("test_trips_map.png", p, width=10, height=8, units="in")
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
geom_point
p <- geom_point(data=coordinates, aes(x=Lon, y=Lat, color=Status, size=Endpoint)) +
     ggtitle("Taxi Trips in the Test Set") +
     scale_color_manual(values=c("#377EB8", "#4DAF4A", "#E41A1C")) +
     scale_size_manual(values=c(1.5, 3))
ggsave("test_trips_map.png", p, width=10, height=8, units="in")
test <- read.csv("test.csv")
test <- data.table(test)
test <- test[POLYLINE!='[]']
setkey(test, TRIP_ID)
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
test <- read.csv("test.csv")
test <- data.table(test)
test <- test[POLYLINE!='[]']
setkey(test, TRIP_ID)
asPoly <- as.character(test$POLYLINE)
test[, SNAPSHOTS:=length(fromJSON(asPoly)), by=TRIP_ID]
test[, POLYLINE:=NULL]
test[, TIMESTAMP:=(as.POSIXct(as.integer(TIMESTAMP), origin="1970-01-01", tz='GMT'))]
test[, sample_date:=as.factor(format(TIMESTAMP, '%Y-%m-%d'))]
test[, CUTOFF:=max(TIMESTAMP), by=sample_date]
test[, duration_snapshots:=SNAPSHOTS*15/60]
test[, duration_timestamp:=as.numeric(CUTOFF-TIMESTAMP)/60]
g <- ggplot(test) + geom_point(aes(x=duration_snapshots, y=duration_timestamp, color=sample_date))
g <- g + facet_wrap(~sample_date) + geom_abline(intercept=0,slope=1)
g <- g + ggtitle('Outlier Detection in the Test Set based uopn the initial trajectories')
ggsave('Test set cutoff point and outlier identification_2.png', width=9, height=5)
test[, SNAPSHOTS:=length(fromJSON(asPoly)), by=TRIP_ID]
test[, POLYLINE:=NULL]
test[, TIMESTAMP:=(as.POSIXct(as.integer(TIMESTAMP), origin="1970-01-01", tz='GMT'))]
test[, sample_date:=as.factor(format(TIMESTAMP, '%Y-%m-%d'))]
test[, CUTOFF:=max(TIMESTAMP), by=sample_date]
test[, duration_snapshots:=SNAPSHOTS*30/60]
test[, duration_timestamp:=as.numeric(CUTOFF-TIMESTAMP)/60]
g <- ggplot(test) + geom_point(aes(x=duration_snapshots, y=duration_timestamp, color=sample_date))
g <- g + facet_wrap(~sample_date) + geom_abline(intercept=0,slope=1)
g <- g + ggtitle('Outlier Detection in the Test Set based upon the initial trajectories')
ggsave('Test set cutoff point and outlier identification_2.png', width=9, height=5)
       test <- read.csv("test.csv")
test <- data.table(test)
test <- test[POLYLINE!='[]']
setkey(test, TRIP_ID)
asPoly <- as.character(test$POLYLINE)
### Get snapshots from POLYLINE and hour from TIMESTAMP
###test[, SNAPSHOTS:=length(fromJSON(as.character(POLYLINE))), by=TRIP_ID]
test[, SNAPSHOTS:=length(fromJSON(asPoly)), by=TRIP_ID]
test[, POLYLINE:=NULL]
test[, TIMESTAMP:=(as.POSIXct(as.integer(TIMESTAMP), origin="1970-01-01", tz='GMT'))]
test[, sample_date:=as.factor(format(TIMESTAMP, '%Y-%m-%d'))]
test[, CUTOFF:=max(TIMESTAMP), by=sample_date]
test[, duration_snapshots:=SNAPSHOTS*10/60]
test[, duration_timestamp:=as.numeric(CUTOFF-TIMESTAMP)/60]
g <- ggplot(test) + geom_point(aes(x=duration_snapshots, y=duration_timestamp, color=sample_date))
g <- g + facet_wrap(~sample_date) + geom_abline(intercept=0,slope=1)
g <- g + ggtitle('Outlier Detection in the Test Set based upon the initial trajectories')
ggsave('Test set cutoff point and outlier identification_2.png', width=9, height=5)
test <- read.csv("test.csv")
test <- data.table(test)
test <- test[POLYLINE!='[]']
setkey(test, TRIP_ID)
asPoly <- as.character(test$POLYLINE)
### Get snapshots from POLYLINE and hour from TIMESTAMP
###test[, SNAPSHOTS:=length(fromJSON(as.character(POLYLINE))), by=TRIP_ID]
test[, SNAPSHOTS:=length(fromJSON(asPoly)), by=TRIP_ID]
test[, POLYLINE:=NULL]
test[, TIMESTAMP:=(as.POSIXct(as.integer(TIMESTAMP), origin="1970-01-01", tz='GMT'))]
test[, sample_date:=as.factor(format(TIMESTAMP, '%Y-%m-%d'))]
test[, CUTOFF:=max(TIMESTAMP), by=sample_date]
test[, duration_snapshots:=SNAPSHOTS*10/60]
test[, duration_timestamp:=as.numeric(CUTOFF-TIMESTAMP)/60]
g <- ggplot(test) + geom_point(aes(x=Duration Snapshots based on the Initial Trajectory, y=Duration Timestamp based on the Initial Trajectory, color=sample_date))
g <- g + facet_wrap(~sample_date) + geom_abline(intercept=10,slope=1)
g <- g + ggtitle('Outlier Detection in the Test Set based upon the initial trajectories')
ggsave('Test set cutoff point and outlier identification_2.png', width=9, height=5)
test <- read.csv("test.csv")
test <- data.table(test)
test <- test[POLYLINE!='[]']
setkey(test, TRIP_ID)
asPoly <- as.character(test$POLYLINE)
### Get snapshots from POLYLINE and hour from TIMESTAMP
###test[, SNAPSHOTS:=length(fromJSON(as.character(POLYLINE))), by=TRIP_ID]
test[, SNAPSHOTS:=length(fromJSON(asPoly)), by=TRIP_ID]
test[, POLYLINE:=NULL]
test[, TIMESTAMP:=(as.POSIXct(as.integer(TIMESTAMP), origin="1970-01-01", tz='GMT'))]
test[, sample_date:=as.factor(format(TIMESTAMP, '%Y-%m-%d'))]
test[, CUTOFF:=max(TIMESTAMP), by=sample_date]
test[, duration_snapshots:=SNAPSHOTS*10/60]
test[, duration_timestamp:=as.numeric(CUTOFF-TIMESTAMP)/60]
g <- ggplot(test) + geom_point(aes(x="Duration Snapshots based on the Initial Trajectory", y="Duration Timestamp based on the Initial Trajectory", color=sample_date))
g <- g + facet_wrap(~sample_date) + geom_abline(intercept=10,slope=1)
g <- g + ggtitle('Outlier Detection in the Test Set based upon the initial trajectories')
ggsave('Test set cutoff point and outlier identification_2.png', width=9, height=5)
test <- read.csv("test.csv")
test <- data.table(test)
test <- test[POLYLINE!='[]']
setkey(test, TRIP_ID)
asPoly <- as.character(test$POLYLINE)
### Get snapshots from POLYLINE and hour from TIMESTAMP
###test[, SNAPSHOTS:=length(fromJSON(as.character(POLYLINE))), by=TRIP_ID]
test[, SNAPSHOTS:=length(fromJSON(asPoly)), by=TRIP_ID]
test[, POLYLINE:=NULL]
test[, TIMESTAMP:=(as.POSIXct(as.integer(TIMESTAMP), origin="1970-01-01", tz='GMT'))]
test[, sample_date:=as.factor(format(TIMESTAMP, '%Y-%m-%d'))]
test[, CUTOFF:=max(TIMESTAMP), by=sample_date]
test[, duration_snapshots:=SNAPSHOTS*10/60]
test[, duration_timestamp:=as.numeric(CUTOFF-TIMESTAMP)/60]
g <- ggplot(test) + geom_point(aes(x="Duration Snapshots based on the Initial Trajectory", y="Duration Timestamp based on the Initial Trajectory", color=sample_date))
g <- g + facet_wrap(~sample_date) + geom_abline(intercept=0,slope=1)
g <- g + ggtitle('Outlier Detection in the Test Set based upon the initial trajectories')
ggsave('Test set cutoff point and outlier identification_2.png', width=9, height=5)
        test <- read.csv("test.csv")
test <- data.table(test)
test <- test[POLYLINE!='[]']
setkey(test, TRIP_ID)
asPoly <- as.character(test$POLYLINE)
### Get snapshots from POLYLINE and hour from TIMESTAMP
###test[, SNAPSHOTS:=length(fromJSON(as.character(POLYLINE))), by=TRIP_ID]
test[, SNAPSHOTS:=length(fromJSON(asPoly)), by=TRIP_ID]
test[, POLYLINE:=NULL]
test[, TIMESTAMP:=(as.POSIXct(as.integer(TIMESTAMP), origin="1970-01-01", tz='GMT'))]
test[, sample_date:=as.factor(format(TIMESTAMP, '%Y-%m-%d'))]
test[, CUTOFF:=max(TIMESTAMP), by=sample_date]
test[, duration_snapshots:=SNAPSHOTS*10/60]
test[, duration_timestamp:=as.numeric(CUTOFF-TIMESTAMP)/60]
g <- ggplot(test) + geom_point(aes(x=Duration Snapshots, y=Duration Timestamp, color=sample_date))
g <- g + facet_wrap(~sample_date) + geom_abline(intercept=0,slope=1)
g <- g + ggtitle('Outlier Detection in the Test Set based upon the initial trajectories')
ggsave('Test set cutoff point and outlier identification_2.png', width=9, height=5)
       test <- read.csv("test.csv")
test <- data.table(test)
test <- test[POLYLINE!='[]']
setkey(test, TRIP_ID)
asPoly <- as.character(test$POLYLINE)
### Get snapshots from POLYLINE and hour from TIMESTAMP
###test[, SNAPSHOTS:=length(fromJSON(as.character(POLYLINE))), by=TRIP_ID]
test[, SNAPSHOTS:=length(fromJSON(asPoly)), by=TRIP_ID]
test[, POLYLINE:=NULL]
test[, TIMESTAMP:=(as.POSIXct(as.integer(TIMESTAMP), origin="1970-01-01", tz='GMT'))]
test[, sample_date:=as.factor(format(TIMESTAMP, '%Y-%m-%d'))]
test[, CUTOFF:=max(TIMESTAMP), by=sample_date]
test[, duration_snapshots:=SNAPSHOTS*10/60]
test[, duration_timestamp:=as.numeric(CUTOFF-TIMESTAMP)/60]
g <- ggplot(test) + geom_point(aes(x=Duration_Snapshots, y=Duration_Timestamp, color=sample_date))
g <- g + facet_wrap(~sample_date) + geom_abline(intercept=0,slope=1)
g <- g + ggtitle('Outlier Detection in the Test Set based upon the initial trajectories')
ggsave('Test set cutoff point and outlier identification_2.png', width=9, height=5)
test <- read.csv("test.csv")
test <- data.table(test)
test <- test[POLYLINE!='[]']
setkey(test, TRIP_ID)
asPoly <- as.character(test$POLYLINE)
### Get snapshots from POLYLINE and hour from TIMESTAMP
###test[, SNAPSHOTS:=length(fromJSON(as.character(POLYLINE))), by=TRIP_ID]
test[, SNAPSHOTS:=length(fromJSON(asPoly)), by=TRIP_ID]
test[, POLYLINE:=NULL]
test[, TIMESTAMP:=(as.POSIXct(as.integer(TIMESTAMP), origin="1970-01-01", tz='GMT'))]
test[, sample_date:=as.factor(format(TIMESTAMP, '%Y-%m-%d'))]
test[, CUTOFF:=max(TIMESTAMP), by=sample_date]
test[, duration_snapshots:=SNAPSHOTS*10/60]
test[, duration_timestamp:=as.numeric(CUTOFF-TIMESTAMP)/60]
g <- ggplot(test) + geom_point(aes(x=duration_snapshots, y=duration_timestamp, color=sample_date))
g <- g + facet_wrap(~sample_date) + geom_abline(intercept=0,slope=1)
g <- g + ggtitle('Outlier Detection in the Test Set based upon the initial trajectories')
ggsave('Test set cutoff point and outlier identification_2.png', width=9, height=5)
      test <- read.csv("test.csv")
test <- data.table(test)
test <- test[POLYLINE!='[]']
setkey(test, TRIP_ID)
asPoly <- as.character(test$POLYLINE)
### Get snapshots from POLYLINE and hour from TIMESTAMP
###test[, SNAPSHOTS:=length(fromJSON(as.character(POLYLINE))), by=TRIP_ID]
test[, SNAPSHOTS:=length(fromJSON(asPoly)), by=TRIP_ID]
test[, POLYLINE:=NULL]
test[, TIMESTAMP:=(as.POSIXct(as.integer(TIMESTAMP), origin="1970-01-01", tz='GMT'))]
test[, sample_date:=as.factor(format(TIMESTAMP, '%Y-%m-%d'))]
test[, CUTOFF:=max(TIMESTAMP), by=sample_date]
test[, duration_snapshots:=SNAPSHOTS*10/60]
test[, duration_timestamp:=as.numeric(CUTOFF-TIMESTAMP)/60]
g <- ggplot(test) + geom_point(aes(x=duration_snapshots, y=duration_timestamp, color=sample_date))
g <- g + facet_wrap(~sample_date) + geom_abline(intercept=10,slope=1)
g <- g + ggtitle('Outlier Detection in the Test Set based upon the initial trajectories')
ggsave('Test set cutoff point and outlier identification_2.png', width=9, height=5)
  test <- read.csv("test.csv")
test <- data.table(test)
test <- test[POLYLINE!='[]']
setkey(test, TRIP_ID)
asPoly <- as.character(test$POLYLINE)
### Get snapshots from POLYLINE and hour from TIMESTAMP
###test[, SNAPSHOTS:=length(fromJSON(as.character(POLYLINE))), by=TRIP_ID]
test[, SNAPSHOTS:=length(fromJSON(asPoly)), by=TRIP_ID]
test[, POLYLINE:=NULL]
test[, TIMESTAMP:=(as.POSIXct(as.integer(TIMESTAMP), origin="1970-01-01", tz='GMT'))]
test[, sample_date:=as.factor(format(TIMESTAMP, '%Y-%m-%d'))]
test[, CUTOFF:=max(TIMESTAMP), by=sample_date]
test[, Duration_Snapshots:=SNAPSHOTS*10/60]
test[, Duration_Timestamp:=as.numeric(CUTOFF-TIMESTAMP)/60]
g <- ggplot(test) + geom_point(aes(x=Duration_Snapshots, y=Duration_Timestamp, color=sample_date))
g <- g + facet_wrap(~sample_date) + geom_abline(intercept=0,slope=1)
g <- g + ggtitle('Outlier Detection in the Test Set based upon the initial trajectories')
ggsave('Test set cutoff point and outlier identification_2.png', width=9, height=5)
q()
